"use strict";angular.module("jensenArticleQuantity",["twsArticleService","twsApi"]),angular.module("jensenArticleQuantity").directive("jensenArticleQuantity",["twsApi.Jed","twsArticleService.ArticleService","$q","twsApi.Locale","twsApi.Select","$injector",function(t,e,i,n,a,l){return{restrict:"E",scope:{articleUid:"=articleUid"},templateUrl:"jensen-article-quantity/templates/jensenArticleQuantity.html",link:function(i,s,r){t(i,"tws-article-quantity"),i.lang=n.language();var o=a("globalSettings.twsBuyButton.watchItemEnabled",l.get("themeSettings"));i.watchItemEnabled=!1,"boolean"==typeof o&&(i.watchItemEnabled=o),i.$watch("articleUid",function(t){t&&e.update(i.articleUid).then(function(t){if(console.warn(t),i.article=t.article,void 0!==i.article.choiceSchema[i.lang].properties){i.choices=i.article.choiceSchema[i.lang].properties,i.originalSettings=i.choices.quantity,i.model=t.schemaForm.model;var e=i.originalSettings;i.settings={"default":angular.isDefined(e["default"])?e["default"]:1,divisibleBy:angular.isDefined(e.divisibleBy)?e.divisibleBy:1,minimum:angular.isDefined(e["default"])?e["default"]:angular.isDefined(e.divisibleBy)?e.divisibleBy:1,maximum:e.maximum},i.divisibleBy=Big(i.settings.divisibleBy),i.quantityOptions=[];for(var n=e.maximum||1,a=1;a<=n;a++)i.quantityOptions.push({name:50*a+" cm (Val "+a+")",value:a})}})}),i.inc=function(){if(void 0===i.model.quantity)return void(i.model.quantity=i.settings.minimum);var t=Big(i.model.quantity);t=t.plus(i.divisibleBy),i.settings.maximum&&1===t.cmp(i.settings.maximum)?i.model.quantity=i.settings.maximum:i.model.quantity=parseFloat(t.toString())},i.dec=function(){if(void 0===i.model.quantity)return void(i.model.quantity=i.settings.minimum);var t=Big(i.model.quantity);t=t.minus(i.divisibleBy),i.settings.minimum&&t.cmp(i.settings.minimum)===-1?i.model.quantity=i.settings.minimum:i.model.quantity=parseFloat(t.toString())}}}}]),angular.module("jensenArticleQuantity").run(["$templateCache",function(t){t.put("jensen-article-quantity/templates/jensenArticleQuantity.html",'<div ng-show="article.uid && originalSettings && !article.presentationOnly && (!watchItemEnabled || (watchItemEnabled && article.isBuyable))"><div class="row tws-article-quantity--input-row"><div class="form-group col-md-5 tws-article-quantity--input-wrapper" ng-class="{\'has-error\': ngModel.$dirty && ngModel.$invalid, \'has-success\': ngModel.$dirty && ngModel.$valid }"><label class="control-label">{{::gettext(\'Quantity\')}}</label><div class="input-group" ng-if="article.unit.sv === \'50 cm\'"><select type="number" name="quantity" class="form-control" required="" ng-options="o.value as o.name for o in quantityOptions" ng-model="model.quantity"></select></div></div></div><div class="row tws-article-quantity--help-block"><div class="col-sm-12 help-block"><span ng-show="ngModel.$error.step">{{ ::gettext(\'This value doesn\\\'t have the right number of decimals.\') }}</span> <span ng-show="ngModel.$error.min">{{ ::gettext(\'This value is too small.\') }}</span> <span ng-show="ngModel.$error.max">{{ ::gettext(\'This value is too large.\') }}</span> <span ng-show="ngModel.$error.required">{{ ::gettext(\'This is required.\') }}</span> <span ng-show="ngModel.$error.number">{{ ::gettext(\'Invalid value.\') }}</span></div></div></div>')}]);